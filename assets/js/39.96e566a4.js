(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{400:function(v,_,a){"use strict";a.r(_);var l=a(7),t=Object(l.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"jvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[v._v("#")]),v._v(" JVM")]),v._v(" "),_("h2",{attrs:{id:"类加载机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类加载机制"}},[v._v("#")]),v._v(" 类加载机制")]),v._v(" "),_("h3",{attrs:{id:"hotspot"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hotspot"}},[v._v("#")]),v._v(" hotspot")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/20240531210859.png",alt:""}})]),v._v(" "),_("h3",{attrs:{id:"类加载过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程"}},[v._v("#")]),v._v(" 类加载过程")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/20240531210717.png",alt:""}})]),v._v(" "),_("ul",[_("li",[v._v("加载、验证、准备、解析、初始化、使用、卸载\n"),_("ul",[_("li",[v._v("加载\n"),_("ul",[_("li",[v._v("在硬盘上查找并通过IO读入字节码文件，使用到的类才会加载，调用类main()，new对象等，在加载阶段会在内存中生成一个代表这个类的java.lang.Class对象，对应方法区这个类的各种数据入口")]),v._v(" "),_("li",[v._v("主类在运行过程如果用到其他类，会逐步加载这类，jar或war不是一次性加载全部，是使用到才加载")]),v._v(" "),_("li",[v._v("加载到方法区包括\n"),_("ul",[_("li",[v._v("运行时常量池")]),v._v(" "),_("li",[v._v("类型信息")]),v._v(" "),_("li",[v._v("字段信息")]),v._v(" "),_("li",[v._v("方法信息")]),v._v(" "),_("li",[v._v("类加载器的引用----这个类到类加载器实例的引用")]),v._v(" "),_("li",[v._v("对应class实例的引用----类加载器加载类信息到方法区后，会创建一个Class类型的对象放到Heap中，作为开发人员访问方法区中类定义的入口和切入点")])])])])]),v._v(" "),_("li",[v._v("链接\n"),_("ul",[_("li",[v._v("验证\n"),_("ul",[_("li",[v._v("校验字节码文件的正确性")])])]),v._v(" "),_("li",[v._v("准备\n"),_("ul",[_("li",[v._v("给类的静态变量分配内存，并赋予默认值，例如static int = 0，static boolean = false，Object = null")])])]),v._v(" "),_("li",[v._v("解析\n"),_("ul",[_("li",[v._v("将符号引用替换为直接引用（内存/物理地址），该阶段会把一些静态方法（符号引用，例如main()）替换为数据所存指针或句柄（直接引用），静态链接过程，动态链接指在程序运行期间完成的将符号引用替换为直接引用的过程")])])])])]),v._v(" "),_("li",[v._v("初始化\n"),_("ul",[_("li",[v._v("对类的静态变量初始化指定的值，执行静态代码块")])])]),v._v(" "),_("li",[v._v("使用")]),v._v(" "),_("li",[v._v("卸载")])])])]),v._v(" "),_("h3",{attrs:{id:"双亲委派原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派原则"}},[v._v("#")]),v._v(" 双亲委派原则")]),v._v(" "),_("ul",[_("li",[v._v("每个类加载器都有自己的父类加载器，当一个类加载器需要加载某个类时，首先会委托给它的父类加载，即先找父亲加载，如果父亲不能加载，子类才会尝试自己去加载")])]),v._v(" "),_("h4",{attrs:{id:"打破双亲委派"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#打破双亲委派"}},[v._v("#")]),v._v(" 打破双亲委派")]),v._v(" "),_("p",[v._v("自定义类加载器，重写findClass，核心类由appClassLoader加载，自定义的类自己加载，不在委派给双亲加载")]),v._v(" "),_("h4",{attrs:{id:"加载器类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#加载器类型"}},[v._v("#")]),v._v(" 加载器类型")]),v._v(" "),_("ul",[_("li",[v._v("引导类加载器：负责加载支撑JVM运行的位于JRE的lib目录下的核心类库\n"),_("ul",[_("li",[v._v("rt.jar")]),v._v(" "),_("li",[v._v("charsets.jar")]),v._v(" "),_("li",[v._v("boostrapLoader(C++实现)")])])]),v._v(" "),_("li",[v._v("扩展类加载器：负责加载JRE的ext目录下的jar包\n"),_("ul",[_("li",[v._v("extCloassLoader")])])]),v._v(" "),_("li",[v._v("应用程序类加载器：负责加载classPath路径下的类包，主要就是加载自己写的类\n"),_("ul",[_("li",[v._v("appClassLoader")])])]),v._v(" "),_("li",[v._v("自定义加载器：负责加载用户自定义路径下的类包")])]),v._v(" "),_("h4",{attrs:{id:"为什么设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么设计"}},[v._v("#")]),v._v(" 为什么设计")]),v._v(" "),_("ul",[_("li",[v._v("沙箱安全：自己写的java.lang.String类不会被加载，防止核心API被随意篡改")]),v._v(" "),_("li",[v._v("避免重复加载：当父亲已经加载了该类，就没有必要子ClassLoader再加载一次，保证加载类的唯一性")])]),v._v(" "),_("h2",{attrs:{id:"jvm内存模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm内存模型"}},[v._v("#")]),v._v(" JVM内存模型")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/20240531212450.png",alt:""}})]),v._v(" "),_("h3",{attrs:{id:"内存模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存模型"}},[v._v("#")]),v._v(" 内存模型")]),v._v(" "),_("ul",[_("li",[v._v("程序计数器：记录当前线程执行位置，以便cpu时间片执行")]),v._v(" "),_("li",[v._v("虚拟机栈：方法执行时，每个方法都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口")]),v._v(" "),_("li",[v._v("本地方法栈：和虚拟机栈类似，但是虚拟机栈用于Java方法的执行，而本地方法栈用于Native方法（C++）")]),v._v(" "),_("li",[v._v("堆：所有对象实例和数组都放在这里")]),v._v(" "),_("li",[v._v("方法区：存放类信息、常量、静态变量")]),v._v(" "),_("li",[v._v("直接内存：NIO，堆外内存")]),v._v(" "),_("li",[v._v("运行时常量池：存放编译期生成的各种字面量和符号引用")])]),v._v(" "),_("h3",{attrs:{id:"参数设置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参数设置"}},[v._v("#")]),v._v(" 参数设置")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/20240531212825.png",alt:""}})]),v._v(" "),_("ul",[_("li",[v._v("堆\n"),_("ul",[_("li",[v._v("-Xms：初始堆大小")]),v._v(" "),_("li",[v._v("-Xmx：最大堆大小")]),v._v(" "),_("li",[v._v("-Xmn：新生代大小")]),v._v(" "),_("li",[v._v("-XX:NewRatio：新生代和老年代比值")]),v._v(" "),_("li",[v._v("-XX:SurvivorRatio：新生代中eden和s0的比例，默认-XX:SurvivorRatio=8，eden：s0=8:2")])])]),v._v(" "),_("li",[v._v("栈\n"),_("ul",[_("li",[v._v("Xss：每个线程的栈大小")])])]),v._v(" "),_("li",[v._v("方法区（元空间）\n"),_("ul",[_("li",[v._v("-XX:MetaspaceSize：最小元空间大小，指定原空间触发FullGC阈值，以字节为单位，默认是21M，建议对于8G机器，设置-XX:MetaspaceSize=256m，与-XX：MaxMetaspaceSize=256m，防止元空间动态扩展")]),v._v(" "),_("li",[v._v("-XX:MaxMetaspaceSize：最大元空间大小，默认-1，表示无限制")])])])]),v._v(" "),_("h2",{attrs:{id:"垃圾回收-gc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收-gc"}},[v._v("#")]),v._v(" 垃圾回收（GC）")]),v._v(" "),_("h3",{attrs:{id:"垃圾回收机制-算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制-算法"}},[v._v("#")]),v._v(" 垃圾回收机制(算法)")]),v._v(" "),_("ul",[_("li",[v._v("分代回收\n"),_("ul",[_("li",[v._v("新生代：复制算法，新生代对象存活时间短，老年代对象存活时间长")]),v._v(" "),_("li",[v._v("老年代：标记-整理算法，老年代对象存活时间长")]),v._v(" "),_("li",[v._v("永久代：方法区，存储类信息、常量、静态变量等")])])]),v._v(" "),_("li",[v._v("引用计数法：给对象添加一个引用计数器，有对象引用时计数器+1，引用失效时计数器-1，没办法解决循环引用问题")]),v._v(" "),_("li",[v._v("复制算法：\n"),_("ul",[_("li",[v._v("流程：将可用内存按容量划分为大小相等的两块，每次只使用其中一块，当这一块用完了，就将还存活的对象复制到另一块去，然后把使用过的空间一次清理掉\n"),_("ul",[_("li",[v._v("标记从gc root做可达性分析，标记所有可达对象")]),v._v(" "),_("li",[v._v("从s0复制存活对象到s1")]),v._v(" "),_("li",[v._v("清理s0")]),v._v(" "),_("li",[v._v("重复以上步骤，在s1和s0之间来回拷贝对象")])])]),v._v(" "),_("li",[v._v("适用场景\n"),_("ul",[_("li",[v._v("存活对象少，比较高效")]),v._v(" "),_("li",[v._v("适合新生代，因为新生代对象存活时间短")])])]),v._v(" "),_("li",[v._v("优点：快速回收内存，不会产生内存碎片")]),v._v(" "),_("li",[v._v("缺点：需要两块一样的空闲空间，需要复制移动对象")])])]),v._v(" "),_("li",[v._v("标记-清除算法：\n"),_("ul",[_("li",[v._v("流程：分为标记和清除两个阶段，先标记出所有需要回收的对象，在回收没被标记的对象，标记清除算法需要遍历整个堆空间，效率低\n"),_("ul",[_("li",[v._v("标记存活对象")]),v._v(" "),_("li",[v._v("清除没有标记的对象")])])]),v._v(" "),_("li",[v._v("适用场景\n"),_("ul",[_("li",[v._v("对象存活比较多")]),v._v(" "),_("li",[v._v("老年代")])])]),v._v(" "),_("li",[v._v("优点：实现简单，只需要标记存活对象和清理未标记对象，可以解决循环引用，只要对象不可达即可回收")]),v._v(" "),_("li",[v._v("缺点：会产生碎片，以及STW")])])]),v._v(" "),_("li",[v._v("标记-整理算法：\n"),_("ul",[_("li",[v._v("流程：标记过程和标记-清除类似，但后续步骤不是直接清理对象，而是把存活的对象移动到内存的一端\n"),_("ul",[_("li",[v._v("标记阶段：遍历整个内存空间，标记被gc root引用的对象")]),v._v(" "),_("li",[v._v("整理阶段：移动那些仍然在使用中的对象，将他们整理到内存的另一端，释放连续的内存空间，不需要额外的空间")])])]),v._v(" "),_("li",[v._v("适用场景：\n"),_("ul",[_("li",[v._v("对象存活较多")]),v._v(" "),_("li",[v._v("老年代")])])]),v._v(" "),_("li",[v._v("优点：与标记复制算法相比，标记-整理算法可以节约内存空间；与标记清除算法相比，避免碎片")]),v._v(" "),_("li",[v._v("缺点：整理过程中，由于对象位置变动，需要调整虚拟机栈中的引用地址，增加算法复杂性，会STW")])])])]),v._v(" "),_("h3",{attrs:{id:"垃圾回收器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器"}},[v._v("#")]),v._v(" 垃圾回收器")]),v._v(" "),_("ul",[_("li",[v._v("Serial（串行）\n"),_("ul",[_("li",[v._v("使用：-XX:+UseSerialGC，-XX:+UseSerialOldGC")]),v._v(" "),_("li",[v._v("单线程，且回收的时候会STW")]),v._v(" "),_("li",[v._v("新生代采用复制算法，老年代采用标记-整理算法")]),v._v(" "),_("li",[v._v("优点：简单高效，与其他收集器的单线程相比")]),v._v(" "),_("li",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/20240531224035.png",alt:""}})])])]),v._v(" "),_("li",[v._v("Parallel（并行）\n"),_("ul",[_("li",[v._v("使用：-X:+UseParallelGC，-XX:+UseParallelOldGC")]),v._v(" "),_("li",[v._v("Serial的多线程版本，收集器线程数与CPU数量相同，也可以指定-XX:ParallelGCThreads=N")]),v._v(" "),_("li",[v._v("新生代采用复制，老年代采用标记-整理")]),v._v(" "),_("li",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/20240531224331.png",alt:""}})])])]),v._v(" "),_("li",[v._v("ParNew\n"),_("ul",[_("li",[v._v("使用：-XX:+UseParNewGC")]),v._v(" "),_("li",[v._v("跟Parallel类似，但只用于新生代，可以配合CMS使用")]),v._v(" "),_("li",[v._v("新生代采用复制算法")]),v._v(" "),_("li",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/20240531224458.png",alt:""}})])])]),v._v(" "),_("li",[v._v("CMS（并发标记清除）\n"),_("ul",[_("li",[v._v("步骤\n"),_("ul",[_("li",[v._v("初始标记：STW，标记GC Roots能直接关联到的对象")]),v._v(" "),_("li",[v._v("并发标记：从GC Roots开始遍历整个堆，标记所有存活对象")]),v._v(" "),_("li",[v._v("重新标记：STW，修正并发标记期间，因用户程序继续运行而导致的标记变动的对象")]),v._v(" "),_("li",[v._v("并发清除：清理未标记对象")])])]),v._v(" "),_("li",[v._v("以获取最短停顿时间为目标，几乎可以让收集线程与用户线程同时工作")]),v._v(" "),_("li",[v._v("优点：并发收集、低停顿")]),v._v(" "),_("li",[v._v("缺点：对cpu资源敏感，无法处理浮动垃圾，大量空间碎片")]),v._v(" "),_("li",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/20240531224710.png",alt:""}})])])]),v._v(" "),_("li",[v._v("G1\n"),_("ul",[_("li",[v._v("分区概念，弱化分代")]),v._v(" "),_("li",[v._v("标记整理算法，不会产生空间碎片，分配大对象不会提前fullgc")]),v._v(" "),_("li",[v._v("可以设置停顿时间")]),v._v(" "),_("li",[v._v("充分利用cpu多核条件下缩短stw")]),v._v(" "),_("li",[v._v("步骤\n"),_("ul",[_("li",[v._v("初始标记：STW，标记GC Roots能直接关联到的对象")]),v._v(" "),_("li",[v._v("并发标记：从GC Roots开始遍历整个堆，标记所有存活对象")]),v._v(" "),_("li",[v._v("最终标记：STW，修正并发标记期间，因用户程序继续运行而导致的标记变动的对象")]),v._v(" "),_("li",[v._v("筛选回收：对各个分区进行回收价值和成本排序，根据用户期望的停顿时间选择要回收的分区的对象")])])])])]),v._v(" "),_("li",[v._v("ZGC\n"),_("ul",[_("li",[v._v("jdk11")])])])]),v._v(" "),_("h3",{attrs:{id:"可达性分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可达性分析"}},[v._v("#")]),v._v(" 可达性分析")]),v._v(" "),_("ul",[_("li",[v._v("虚拟机栈中引用的对象")]),v._v(" "),_("li",[v._v("方法区中类静态属性引用的对象")]),v._v(" "),_("li",[v._v("方法区中常量引用的对象")]),v._v(" "),_("li",[v._v("本地方法栈中JNI引用的对象")]),v._v(" "),_("li",[v._v("活跃线程引用的对象")])]),v._v(" "),_("h2",{attrs:{id:"强软弱虚"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强软弱虚"}},[v._v("#")]),v._v(" 强软弱虚")]),v._v(" "),_("ul",[_("li",[v._v("强引用：new出来的对象，只要强引用存在，垃圾回收器就永远不会回收")]),v._v(" "),_("li",[v._v("软引用：内存空间足够，垃圾回收器不会回收；内存空间不足，垃圾回收器会回收")]),v._v(" "),_("li",[v._v("弱引用：只要垃圾回收器工作，不管内存是否足够，都会被回收")]),v._v(" "),_("li",[v._v("虚引用：不会对对象生存时间产生影响，也无法通过虚引用来获取对象")])]),v._v(" "),_("h2",{attrs:{id:"oom的种类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#oom的种类"}},[v._v("#")]),v._v(" OOM的种类")]),v._v(" "),_("ul",[_("li",[v._v("堆溢出：java.lang.OutOfMemoryError: Java heap space")]),v._v(" "),_("li",[v._v("栈溢出：java.lang.StackOverflowError")]),v._v(" "),_("li",[v._v("直接内存溢出：java.lang.OutOfMemoryError: Direct buffer memory")]),v._v(" "),_("li",[v._v("永久代溢出：java.lang.OutOfMemoryError: PermGen space")]),v._v(" "),_("li",[v._v("元空间溢出：java.lang.OutOfMemoryError: Metaspace")]),v._v(" "),_("li",[v._v("无法创建新线程：java.lang.OutOfMemoryError: unable to create new native thread")])]),v._v(" "),_("h2",{attrs:{id:"jvm性能检测工具"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm性能检测工具"}},[v._v("#")]),v._v(" JVM性能检测工具")]),v._v(" "),_("ul",[_("li",[v._v("jps：查看进程")]),v._v(" "),_("li",[v._v("jstat：查看堆内存使用情况")]),v._v(" "),_("li",[v._v("jmap：查看堆内存使用情况，jmap -dump:file=xxx.dump,format=b "),_("pid")],1),v._v(" "),_("li",[v._v("jstack：查看线程堆栈")]),v._v(" "),_("li",[v._v("jconsole：图形化界面")]),v._v(" "),_("li",[v._v("jvisualvm：图形化界面")]),v._v(" "),_("li",[v._v("jinfo：查看java配置信息")]),v._v(" "),_("li",[v._v("jdb：调试工具")]),v._v(" "),_("li",[v._v("Arths：Arthas")])]),v._v(" "),_("h2",{attrs:{id:"cpu100-排查"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cpu100-排查"}},[v._v("#")]),v._v(" CPU100%排查")]),v._v(" "),_("h3",{attrs:{id:"原因"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[v._v("#")]),v._v(" 原因")]),v._v(" "),_("ul",[_("li",[v._v("死循环")]),v._v(" "),_("li",[v._v("大量GC")]),v._v(" "),_("li",[v._v("大量密集型任务")]),v._v(" "),_("li",[v._v("死锁")])]),v._v(" "),_("p",[v._v("https://mp.weixin.qq.com/s/GyFl-rxQkCZM4q65dl5o1g\nhttps://mp.weixin.qq.com/s/TcprDRjzQCXQ7OQmJ0E5XQ")]),v._v(" "),_("h3",{attrs:{id:"jstack"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jstack"}},[v._v("#")]),v._v(" jstack")]),v._v(" "),_("ul",[_("li",[v._v("获取进程id\n"),_("ul",[_("li",[v._v("top")])])]),v._v(" "),_("li",[v._v("查看进程内的线程id\n"),_("ul",[_("li",[v._v("top -Hp 3030，找到最消耗cpu的线程id3051，H表示显示线程级别信息，p表示指定进程id")])])]),v._v(" "),_("li",[v._v("将线程id转换为16进制\n"),_("ul",[_("li",[v._v('printf "%x\\n" 3051      # beb')])])]),v._v(" "),_("li",[v._v("通过自带的jstack导出堆栈，查看代码\n"),_("ul",[_("li",[v._v("jstack 3051 > grep beb（转换后的十六进制代码）")])])])]),v._v(" "),_("h3",{attrs:{id:"show-busy-threads-脚本"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#show-busy-threads-脚本"}},[v._v("#")]),v._v(" show-busy-threads 脚本")]),v._v(" "),_("h3",{attrs:{id:"arthas"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arthas"}},[v._v("#")]),v._v(" arthas")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("下载")]),v._v(" "),_("ul",[_("li",[v._v("curl -O https://arthas.aliyun.com/arthas-boot.jar")])])]),v._v(" "),_("li",[_("p",[v._v("启动")]),v._v(" "),_("ul",[_("li",[v._v("java -jar arthas-boot.jar")])])]),v._v(" "),_("li",[_("p",[v._v("执行thread命令")]),v._v(" "),_("ul",[_("li",[v._v("thread")])])]),v._v(" "),_("li",[_("p",[v._v("找到堆栈信息")]),v._v(" "),_("ul",[_("li",[v._v("thread 18")])])]),v._v(" "),_("li",[_("p",[v._v("堆栈+线程+锁+内存+代码+对象+对象引用：jstack -m -l "),_("pid",[v._v(" > jstack.log")])],1)])]),v._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("p",[v._v("生产环境如果cpu已经被打满了，不要一上来就说什么top，jstack，记住，真实的生产环境如果CPU已经要被打爆了的话\n第一选择肯定是重启，并且如果你近段时间有发布的话，还要考虑是否可以回滚，保障生产环境的稳定性是最重要的\n还有就是，如果CPU已经被打爆了，不管arthas还是jstack大概率也是执行不了的，jvm无法响应")]),v._v(" "),_("p",[v._v("参考答案：\n之前碰到过cpu被打满的情况，线上第一时间进行了重启，重启过程中查了服务那段时间日志，链路，指标，没有发现特殊异常。\n当重启完成后，开始排查具体的原因，通过定期执行top命令，发现java进程的cpu使用率确实在增加。\n接着通过 top -Hp pid命令，以及jstack命令拿到了应用里cpu使用率最高的线程的堆栈，通过分析堆栈定位到具体的代码，是因为代码触发了一个临界值，进入了死循环。")])])}),[],!1,null,null,null);_.default=t.exports}}]);