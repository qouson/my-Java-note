(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{428:function(s,e,n){"use strict";n.r(e);var a=n(7),t=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"杂乱无章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#杂乱无章"}},[s._v("#")]),s._v(" 杂乱无章")]),s._v(" "),e("h2",{attrs:{id:"更新2024-12-26"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新2024-12-26"}},[s._v("#")]),s._v(" 更新2024-12-26")]),s._v(" "),e("h3",{attrs:{id:"流程图测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程图测试"}},[s._v("#")]),s._v(" 流程图测试")]),s._v(" "),e("div",{staticClass:"language-mermaid line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-mermaid"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("graph")]),s._v(" TD\n  A"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(开始)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token inter-arrow-label"}},[e("span",{pre:!0,attrs:{class:"token arrow-head arrow operator"}},[s._v("--")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token label property"}},[s._v("just test")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")])]),s._v(" B"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("{是否符合}")]),s._v("\n  B "),e("span",{pre:!0,attrs:{class:"token inter-arrow-label"}},[e("span",{pre:!0,attrs:{class:"token arrow-head arrow operator"}},[s._v("--")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token label property"}},[s._v("yes")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")])]),s._v(" C\n  B "),e("span",{pre:!0,attrs:{class:"token inter-arrow-label"}},[e("span",{pre:!0,attrs:{class:"token arrow-head arrow operator"}},[s._v("--")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token label property"}},[s._v("no")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")])]),s._v(" D\n  C "),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v(" E"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(结束)")]),s._v("\n  D "),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v(" E"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(结束)")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("https://wx.zsxq.com/group/51121241882444/topic/4848544415524848\n\n覆盖率\n单元测试\n集成测试\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"更新2024-12-26-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新2024-12-26-2"}},[s._v("#")]),s._v(" 更新2024-12-26")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('一般用Junit+Mockito+PowerMockito\n\nT PowerMockito.mock(Class clazz):\n用途：用于模拟指定类的对象实例。\n当模拟非final类（接口，普通类，虚基类）的非final方法时，不必使用@RunWith和@PrepareForTest注解。\n当模拟final类或final方法时，必须使用@RunWith(PowerMockRunner.class)和@PrepareForTest({StringUtils.class})注解\n\nPowerMockito.mockStatic(Class clazz);\n用途：用于模拟类的静态方法，必须使用@RunWith(PowerMockRunner.class)和@PrepareForTest({StringUtils.class})注解\n\n一个简单的例子：\npublic class ListTest{\n    @Test\n    public void testSize(){\n        Integer expected = 100;\n        List list = PowerMockito.mock(List.class);\n        PowerMockito.when(list.size()).thenReturn(expected);\n        Integer actual = list.size();\n        Assert.assertEquals("返回值不相等", expected, actual);    \n     }\n}\n\nmock语句\nmock方法\n声明：T PowerMockito.mock(Class clazz)：用途：用于模拟指定类的对象实例。\n当模拟非final类（接口，普通类，虚基类）的非final方法时，不必使用@RunWith和@PrepareForTest注解。）\n当模拟final类或final方法时，必须使用@RunWith(PowerMockRunner.class)和@PrepareForTest({StringUtils.class})注解\n\n模拟非final类普通方法\npublic class Rectangle implements Shape{\n    private double width;\n    private double height;\n    @Override\n    public double getArea(){\n        return width * height;\n    }\n}\npublic class RectangleTest{\n    @Test\n    public void testGetArea(){\n        double expectArea = 100.0D;\n        Rectangle rectangle = PowerMockito.mock(Rectangle.class);\n        PowerMockito.when(rectangle.getArea()).thenReturn(expectArea);)\n        double actual = rectangle.getArea();\n        Assert.assertEquals("返回值不相等", expectArea, actual);\n    }\n}\n\n模拟final类或final方法\n需要使用@RundWith(PowderMockRunner.class)和@PrepareForTest({Circle.class})注解\npublic final class Circle{\n    private double radius;\n    public double getArea(){\n        return Math.PI * Math.pow(radius, 2);\n    }\n}\n@RunWith(PowerMockRunner.class)\n@PrepareForTest({Circle.class})\npublic class CircleTest{\n    @Test\n    public void testGetArea(){\n        double expectArea = 100.0D;\n        Circle circle = PowerMockito.mock(Circle.class);\n        PowerMockito.when(circle.getArea()).thenReturn(expectArea);\n        double actual = circle.getArea();\n        Assert.assertEquals("返回值不相等", expectArea, actual);\n    }\n}\n\nmockStatic方法\nPowerMockito.mockStatic(Class clazz)：用途：用于模拟类的静态方法，必须使用@RunWith(PowerMockRunner.class)和@PrepareForTest({StringUtils.class})注解\n@RunWith(PowerMockRunner.class)\n@PrepareForTest({StringUtils.class})\npublic class StringUtilsTest{\n    @Test\n    public void testIsEmpty(){\n        String string = "abc";\n        boolean expected = true;\n        PowerMockito.when(StringUtils.class);\n        PowerMockito.when(StringUtils.isEmpty(string)).thenReturn(expected);\n        boolean actual = StringUtils.isEmpty(string); // 这里调用时，就会发现是返回的mock数据\n        Assert.assertEquals("返回值不相等", expected, actual);\n    }\n}\n\n\nspy语句：\n如果一个对象，我们只希望模拟它的部分方法，而希望其他方法跟原来一样，可以使用PowerMockito.spy方法替代PowerMockito.mock方法。\n通过when设置过的方法，调用的是模拟方法，没有通过when语句的调用的是原来的方法\npowerMock又两种使用，一种是非注解，一种是注解注入的。\nSpy类（非注解）：\nPowerMockito.spy(StringUtils.class)\nPowerMockito.when(StringUtils.isEmpty(string)).thenReturn(!expected)\n例子：\nspy对象（非注解）：\n声明：T PowerMockito.spy(T object)：用途：用于模拟对象的部分方法，如UserService类要测试isNotSuperUser方法，但是要mock掉isSupperUser这个方法，就需要对这个类加个spy，注解为@RunWith(PowderMockRunner.class)\n案例：\npublic class UserService{\n    private Long superUserId;\n    public boolean isNotSuperUser(Long userId){\n        return !isSuperUser(userId);\n    }\n    public boolean isSuperUser(Long userId){\n        return Objects.equals(userId, superUserId);\n    }\n}\n\n@RunWith(PowerMockRunner.class)\npublic class UserServiceTest{\n    @Test\n    public void testIsNotSuperUser(){\n        Long userId = 1L;\n        boolean expected = false;\n        UserService userService = PowerMockito.spy(UserService.class);\n        PowerMockito.when(userService.isSuperUser(userId)).thenReturn(!expected);\n        boolean actual = userService.isNotSuperUser(userId);\n        Assert.assertEquals("返回值不相等", expected, actual);\n    }\n}\n\n\n注解：使用InjectMocks注解注入的方式，使用@Spy\n@RundWith(PowerMockRunner.class)\npublic class UserServiceTest{\n    @Spy\n    @InjectMocks\n    private UserService userServiceSpy = new UserService();\n    @Test\n    public void testIsNotSuperUser(){\n        Long userId = 1L;\n        boolean expected = false;\n        // 不要使用这种方法是，会先调用方法再mock\n        // PowerMockito.when(userServiceSpy).isSuperUser(userId);\n        // 这种方式就不会先调用方法\n        // 直接使用userId是强匹配，使用any()是所有参数都匹配\n        doReturn(!expected).when(userServiceSpy).isSuperUser(userId);\n        boolean actual = userService.isNotSuperUser(userId);\n        Assert.assertEquals("返回值不相等", expected, actual);\n    }\n}\n\n\nwhen语句\nwhen().thenReturn()\n声明：\nPowerMockito.when(mockObject.someMethod(someArgs)).thenReturn(expectedValue);\nPowerMockito.when(mockObject.someMethod(someArgs)).thenThrow(expectedThrowable);\nPowerMockito.when(mockObject.someMethod(someArgs)).thenAnswer(expectedAnswer);\nPowerMockito.when(mockObject.someMethod(someArgs)).thenCallRealMethod();\n用途：用于模拟对象方法，先执行原始放啊，再返回期望的值，异常，应答，或调用真实方法。\n\ndoReturn().when()\n模式\n声明：\nPowermockito.doReturn(expectedValue).when(mockObject).someMethod(someArgs);\nPowerMockito.doThrow(expectedThrowable).when(mockObject).someMethod(someArgs);\nPowerMockito.doAnswer(expectedAnswer).when(mockObject).someMethod(someArgs);\nPowerMockito.doNothing().when(mockObject).someMethod(someArgs);\nPowerMockito.doCallRealMethod().when(mockObject).someMethod(someArgs);\n用途：用于模拟对象方法，直接返回期望值的值，异常，应答，或调用真实方法。无需执行原始方法。\n注意：千万不要使用以下语法：\nPowerMockito.doReturn(expectedValue).when(mockObject.someMethod(someArgs));\nPowerMockito.doThrow(expectedThrowable).when(mockObject.someMethod(someArgs));\nPowerMockito.doAnswer(expectedAnswer).when(mockObject.someMethod(someArgs));\nPowerMockito.doNothing().when(mockObject.someMethod(someArgs));\nPowerMockito.doCallRealMethod().when(mockObject.someMethod(someArgs));\n虽然不会出现编译错误，但是在执行时会抛出UnfinishedStubbingException异常。\n\n两种模式的主要区别：\n两种模式都用于模拟对象方法，在mock实例下使用时，基本上没有差别。但是在spy实例下使用，when().thenReturn()会先执行原方法，而doReturn().when()不会执行原方法。\n\n\nwhenNew模拟构造方法\n声明：\nPowerMockito.whenNew(MockClass.class).withNoArguments().thenReturn(expectedObject);\nPowerMockito.whenNew(MockClass.class).withArguments(someArgs).thenReturn(expectedObject);\n\n用途：用于模拟构造方法。案例：\npublic final class FileUtils{\n    public static boolean isFile(Sting fileName){\n        return new File(fileName).isFile();\n    }\n}\n@RunWith(PowerMockRunner.class)\n@PrepareForTest(FileUtils.class)\npublic class FileUtilsTest{\n    @Test\n    public void testIsFile() throws Exception{\n        String fileName = "test.txt";\n        File file = PowerMockito.mock(File.class);\n        PowerMockito.whenNew(File.class).withArguments(fileName).thenReturn(file);\n        PowerMockito.when(file.isFile()).thenReturn(true);\n        Assert.assertTrue("返回值为假",FileUtils.isFile(fileName));\n    }\n}\n注意：需要加上注解@PrepareForTest(FileUtils.class)，否则模拟方法不生效。\n\n\n参数匹配器：\n在执行单元测试时，有时候不关心传入的参数的值，可以使用参数匹配器。\n注意：你能具体到指定类型如anyString，anyInt，就不用any()。null值必须显式用null，或eq(null)来匹配\n\n参数匹配器(any)\nMockito提供Mockito.anyInt(),Mockito.anyString,Mockito.any(Class clazz)来表示任何值。\npublic class ListTest{\n    @Test\n    public void testGet(){\n        int index = 1;\n        Integer expcected = 100;\n        List<Integer> mockList = PowerMockito.mock(List.class);\n        PowerMockito.when(mockList.get(Mockito.anyInt())).thenReturn(expcected);\n        Integer actual = mockList.get(index);\n        Assert.assertEquals("返回值不相等", expcected, actual);\n    }\n}\n\n\n参数匹配器(eq)\n当我们使用参数匹配器时，所有参数都应使用匹配器。如果要为某一参数指定特定值时，就需要使用Mockito.eq()方法。\n@Runwith(PowerMockRunner.class)\n@PrepareForTest(StringUtils.class)\npublic class StringUtilsTest{\n    @Test\n    public void testStartWith(){\n        String string = "abc";\n        String perfix = "b";\n        boolean expected = true;\n        PowerMockito.spy(StringUtils.class);\n        PowerMockito.when(StringUtils.startWith(Mockito.anyString(),Mockito.eq(prefix))).thenReturn(expected);\n        boolean actual = StringUtils.startsWith(string,perfix);\n        Assert.assertEquals("返回值不相等", expected, actual);\n    }\n}\n\n\n附加匹配器\nMockito的AdditionalMathchers类提供了一些很少使用的参数匹配器，我们可以进行参数大于(gt)、小于(lt)、大于等于(geq)、小于等于(leq)等比较操作，也可以进行参数与(and)、或(or)、非(not)等逻辑操作。\npublic class ListTest{\n    @Test\n    public void testGet(){\n        int index = 1;\n        Integer expected = 100;\n        List<Integer> mockList =PowerMockito.mock(List.class);\n        PowerMockito.when(mockList.get(AdditionalMatchers.geq(0))).thenReturn(expected);\n        PowerMockito.when(mockList.get(AdditionalMatchers.lt(0))).thenThrow(new IndexOutOfBoundsException());\n        Intger actual = mockList.get(index);\n        Assert.assertEquals("返回值不相等", expected, actual);\n    }\n}\n\n\nverify语句\n验证是确认在模拟过程中，被测试方法是否已按预期方式与其任何依赖方法进行了交互。\n格式：\nMockito.verify(mockObject[,times(int)]).someMethod(someArgs);\n用途：\n用于模拟对象方法，直接返回预期的值，异常，应答，或调用真实方法。\n案例：\n验证调用方法\npublic classLi身体Test{\n    @Test\n    public void testGet（）{\n        List<Iteger> mockList= PowerMockito.mock(List.class);\n        PowerMockito.doNothing().when(mockList).clear();\n        mockList.clear();\n        Mockito.verify(mockList).clear();\n    }\n}\n\npublic class ListTest{\n    @Test\n    public void testGet(){\n        List<Integer> mockList = PowerMockito.mock(List.class);\n        PowerMockito.doNothing().when(mockList).clear();\n        mockList.clear();\n        Mockito.verify(mockList,Mockito.times(1)).clear();\n    }\n}\n除times外，Mockito还支持atLeastOne，atLeast，only，atMostOnce，atMost等次数验证器\n\n\n验证调用顺序\npublic class ListTest{\n    @Test\n    public void testAdd(){\n        List<Integer> mockList = PowerMockito.mock(List.class);\n        PowerMockito.doReturn(true).when(mockList).add(Mockito.anyInt());\n        mockedList.add(1);\n        mockedList.add(2);\n        mockedList.add(3);\n        InOrder inOrder = Mockito.inOrder(mockList);\n        inOrder.verify(mockList).add(1);\n        inOrder.verify(mockList).add(2);\n        inOrder.verify(mockList).add(3);\n    }\n}\n\n\n验证调用参数\n用于断言void方法，没有返回结果，可以断言内部调用的请求参数\npublic class ListTest{\n    @Test\n    public void testArgumentCaptor(){\n        Integer[] expecteds = new Integer[]{1,2,3};\n        List<Integer> mockedList = PowerMockito.mock(List.class);\n        PowerMockito.doReturn(true).when(mockedList).add(Mockito.anyInt());\n        for(Integer expected : expecteds){\n            mockedList.add(expected);\n        }\n        ArgumentCaptor<Integer> argumentCaptor = ArgumentCaptor.forClass(Integer.class);\n        Mockito.verify(mockedList,Mockito.times(3)).add(argumentCaptor.capture());\n        Integer[] actuals = argumentCaptor.getAllValues().toArray(new Integer[0]);\n        Assert.assertArrayEquals("参数不相等",expecteds,actuals);\n    }\n}\n\n\n确保验证完毕\nMockito提供Mockito.verifyNoMoreInteractions方法，在所有验证方法之后可以使用此方法，以确保所有调用都得到验证。如果模拟对象上存在未验证的调用，将会抛出NoInteractionsWanted异常。\npublic class ListTest{\n    @Test\n    public void testVerifyNoMoreInteractions(){\n        List<Integer> mockedList = PowerMockito.mock(List.class);\n        Mockito.verifyNoMoreInteractions(mockedList);//执行正常呢\n        mockedList.isEmpty();\n        Mockito.verifyNoMoreInteractions(mockedList);//抛出异常\n    }\n}\n备注：Mockito.verifyZeroInteractions(mockedList)与Mockito.verifyNoMoreInteractions(mockedList)效果相同，但目前已经被废弃。\n\n\n验证静态方法\nMockito没有静态方法的验证方法，但是PowerMockito提供了静态方法的验证方法。注意：@RunWith(PowerMockRunner.class)和@PrepareForTest(StaticClass.class)\n@Runwith(PowerMockRunner.class)\n@PrepareForTest(StringUtils.class)\npublic class StringUtilsTest{\n    @Test\n    public void testVerifyStatic(){\n        PowerMockito.spy(StringUtils.class);\n        String expected = "abc";\n        StringUtils.isEmpty(expected);\n        PowerMockito.verifyStatic(StringUtils.class);\n        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n        StringUtils.isEmpty(argumentCaptor.capture());\n        Assert.assertEquals("参数不相等",expected,argumentCaptor.getValue());\n    }\n}\n\n\n私有属性\nReflectionTestUtils.setField方法\n在用原生JUnit进行单元测试时，我们一般采用ReflectionTestUtils.setField方法来设置私有属性。\n@Service\npublic class UserService{\n    @Value("${system.userLimit}")\n    private Long userLimit;\n    public Long getUserLimit(){\n        return userLimit;\n    }\n}\npublic class UserServiceTest{\n    @Autowired\n    private UserService userService;\n    @Test\n    public void testGetUserLimit(){\n        Long expected = 1000L;\n        ReflectionTestUtils.setField(userService,"userLimit",expected);\n        Long actual = userService.getUserLimit();\n        Assert.assertEquals("返回值不相等",expected,actual);\n    }\n}\n注意：在测试类中，UserService实例是通过@Autowired注解加载的，如果该实例已经被动态代理，ReflectionTestUtils。setField方法设置的是代理实例，从而导致设置不生效。\n\n\nWhitebox.setInternalState方法\n现在使用PowerMock进行单元测试时，可以采用Whitebox.setInternalState方法设置私有属性值。注意：@RunWith(PowerMockRunner.class)\n@Service\npublic class UserService{\n    @Value("${system.userLimit}")\n    private Long userLimit;\n    public Long getUserLimit(){\n        return userLimit;\n    }\n}\n@RunWith(PowerMockRunner.class)\npublic class UserServiceTest{\n    @InjectMocks\n    private UserService userService;\n    @Test\n    public void testGetUserLimit(){\n        Long expected = 1000L;\n        Whitebox.setInternalState(userService,"userLimit",expected);\n        Long actual = userService.getUserLimit();\n        Assert.assertEquals("返回值不相等",expected,actual);\n    }\n}\n注意：需要加上注解@RunWith(PowerMockRunner.class)\n\n\n私有方法\n模拟私有方法\nMockito没有私有方法的mock方法，但是PowerMockito提供了私有方法的模拟方法。注意：@RunWith(PowerMockRunner.class)和@PrepareForTest(UserService.class)，mock私有方法入参不要使用匹配器，可能会导致匹配失败。\n通过when实现\npublic class UserService{\n    private Long superUserId;\n    public boolean isNotSupperUser(Long userId){\n        return !isSupperUser(userId);\n    }\n    private boolean isSuppperUser(Long userId){\n        return Objects.equals(userId,superUserId);\n    }\n}\n@RunWith(PowerMockRunner.class)\n@PrepareForTest(UserService.class)\npublic class UserServiceTest{\n    @Test\n    public void testIsNotSupperUser() throws Exception{\n        Long userId = 1L;\n        boolean expected = false;\n        UserService userService = PowerMockito.spy(new UserService());\n        PowerMockito.when(userService, "isSuppperUser", userId).thenReturn(expected);\n        boolean actual = userService.isNotSupperUser(userId);\n        Assert.assertEquals("返回值不相等",expected,actual);\n    }\n}\n\n\n通过stub实现\n通过模拟方法stub(存根)，也可以实现模拟私有方法。但是，只能模拟整个方法的返回值，不能模拟指定参数的返回值。\n@RunWith(PowerMockRunner.class)\n@PrepareForTest(UserService.class)\npublic class UserServiceTest{\n    @Test\n    public void testIsNotSupperUser() throws Exception{\n        Long userId = 1L;\n        boolean expected = false;\n        UserService userService = PowerMockito.spy(new UserService());\n        PowerMockito.stub(PowerMockito.method(UserService.class,"isSuppperUser")).toReturn(expected);\n        boolean actual = userService.isNotSupperUser(userId);\n        Assert.assertEquals("返回值不相等",expected,actual);\n    }\n}\n\n\n测试私有方法\n@RunWith(PowerMockRunner.class)\npublic class UserServiceTest{\n    @Test\n    public void testIsSupperUser() throws Exception{\n        Long userId = 1L;\n        boolean expected = false;\n        UserService userService = new UserService();\n        Method method = PowerMockito.method(UserService.class,"isSuppperUser", Long.class);\n        Object actual = method.invoke(userService,userId);\n        Assert.assertEquals("返回值不相等",expected,actual);\n    }\n}\n\n\n验证私有方法\n@RunWith(PowerMockRunner.class)\n@PrepareForTest(UserService.class)\npublic class UserServiceTest{\n    @Test\n    public void testIsNotSupperUser() throws Exception{\n        Long userId = 1L;\n        boolean expected = false;\n        UserService userService = PowerMockito.spy(new UserService());\n        PowerMockito.when(userService, "isSuppperUser", userId).thenReturn(expected);\n        boolean actual = userService.isNotSupperUser(userId);\n        PowerMockito.verifyPrivate(userService).invoke("isSuppperUser",userId);\n        Assert.assertEquals("返回值不相等",expected,actual);\n    }\n}\n这里，也可以用Method那套方法进行模拟和验证方法。\n\n\n主要注解：\nPowerMock为了更好地支持SpringMVC/SpringBoot项目，提供了一系列注解，大大简化测试代码。\n\n@RunWith注解，指定JUnit使用PowerMock框架中的单元测试运行器。\n\n@PrepareForTest注解，指定需要模拟final类，final方法或静态方法。如果需要指定多个类，在{}中添加多个类并用逗号隔开。\n\n@Mock注解，创建了一个全部Mock的实例，所有属性和方法全被置空（0或null）。通常可以加上@Mock(lenient = true)防止mock未使用而报错。\n\n@Spy注解，创建了一个没有Mock的实例，所有成员方法都会按照原方法逻辑执行，知道被Mock返回某个具体的值为止。注意：@Spy注解的变量需要被初始化，否则执行时抛出异常。\n\n@InjectMocks注解，创建一个实例，这个实例可以调用真实代码，其余用@Mock或@Spy注解创建的实例将被注入到这个实例中。\n\n@Captor注解，该注解在字段级别创建参数捕获器。但是，在测试方法启动前必须调用MockitoAnnotations.openMocks(this)进行初始化。\n\n@PowerMockIgnore注解，为了解决使用PowerMock后，提示ClassLoader错误。\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br"),e("span",{staticClass:"line-number"},[s._v("90")]),e("br"),e("span",{staticClass:"line-number"},[s._v("91")]),e("br"),e("span",{staticClass:"line-number"},[s._v("92")]),e("br"),e("span",{staticClass:"line-number"},[s._v("93")]),e("br"),e("span",{staticClass:"line-number"},[s._v("94")]),e("br"),e("span",{staticClass:"line-number"},[s._v("95")]),e("br"),e("span",{staticClass:"line-number"},[s._v("96")]),e("br"),e("span",{staticClass:"line-number"},[s._v("97")]),e("br"),e("span",{staticClass:"line-number"},[s._v("98")]),e("br"),e("span",{staticClass:"line-number"},[s._v("99")]),e("br"),e("span",{staticClass:"line-number"},[s._v("100")]),e("br"),e("span",{staticClass:"line-number"},[s._v("101")]),e("br"),e("span",{staticClass:"line-number"},[s._v("102")]),e("br"),e("span",{staticClass:"line-number"},[s._v("103")]),e("br"),e("span",{staticClass:"line-number"},[s._v("104")]),e("br"),e("span",{staticClass:"line-number"},[s._v("105")]),e("br"),e("span",{staticClass:"line-number"},[s._v("106")]),e("br"),e("span",{staticClass:"line-number"},[s._v("107")]),e("br"),e("span",{staticClass:"line-number"},[s._v("108")]),e("br"),e("span",{staticClass:"line-number"},[s._v("109")]),e("br"),e("span",{staticClass:"line-number"},[s._v("110")]),e("br"),e("span",{staticClass:"line-number"},[s._v("111")]),e("br"),e("span",{staticClass:"line-number"},[s._v("112")]),e("br"),e("span",{staticClass:"line-number"},[s._v("113")]),e("br"),e("span",{staticClass:"line-number"},[s._v("114")]),e("br"),e("span",{staticClass:"line-number"},[s._v("115")]),e("br"),e("span",{staticClass:"line-number"},[s._v("116")]),e("br"),e("span",{staticClass:"line-number"},[s._v("117")]),e("br"),e("span",{staticClass:"line-number"},[s._v("118")]),e("br"),e("span",{staticClass:"line-number"},[s._v("119")]),e("br"),e("span",{staticClass:"line-number"},[s._v("120")]),e("br"),e("span",{staticClass:"line-number"},[s._v("121")]),e("br"),e("span",{staticClass:"line-number"},[s._v("122")]),e("br"),e("span",{staticClass:"line-number"},[s._v("123")]),e("br"),e("span",{staticClass:"line-number"},[s._v("124")]),e("br"),e("span",{staticClass:"line-number"},[s._v("125")]),e("br"),e("span",{staticClass:"line-number"},[s._v("126")]),e("br"),e("span",{staticClass:"line-number"},[s._v("127")]),e("br"),e("span",{staticClass:"line-number"},[s._v("128")]),e("br"),e("span",{staticClass:"line-number"},[s._v("129")]),e("br"),e("span",{staticClass:"line-number"},[s._v("130")]),e("br"),e("span",{staticClass:"line-number"},[s._v("131")]),e("br"),e("span",{staticClass:"line-number"},[s._v("132")]),e("br"),e("span",{staticClass:"line-number"},[s._v("133")]),e("br"),e("span",{staticClass:"line-number"},[s._v("134")]),e("br"),e("span",{staticClass:"line-number"},[s._v("135")]),e("br"),e("span",{staticClass:"line-number"},[s._v("136")]),e("br"),e("span",{staticClass:"line-number"},[s._v("137")]),e("br"),e("span",{staticClass:"line-number"},[s._v("138")]),e("br"),e("span",{staticClass:"line-number"},[s._v("139")]),e("br"),e("span",{staticClass:"line-number"},[s._v("140")]),e("br"),e("span",{staticClass:"line-number"},[s._v("141")]),e("br"),e("span",{staticClass:"line-number"},[s._v("142")]),e("br"),e("span",{staticClass:"line-number"},[s._v("143")]),e("br"),e("span",{staticClass:"line-number"},[s._v("144")]),e("br"),e("span",{staticClass:"line-number"},[s._v("145")]),e("br"),e("span",{staticClass:"line-number"},[s._v("146")]),e("br"),e("span",{staticClass:"line-number"},[s._v("147")]),e("br"),e("span",{staticClass:"line-number"},[s._v("148")]),e("br"),e("span",{staticClass:"line-number"},[s._v("149")]),e("br"),e("span",{staticClass:"line-number"},[s._v("150")]),e("br"),e("span",{staticClass:"line-number"},[s._v("151")]),e("br"),e("span",{staticClass:"line-number"},[s._v("152")]),e("br"),e("span",{staticClass:"line-number"},[s._v("153")]),e("br"),e("span",{staticClass:"line-number"},[s._v("154")]),e("br"),e("span",{staticClass:"line-number"},[s._v("155")]),e("br"),e("span",{staticClass:"line-number"},[s._v("156")]),e("br"),e("span",{staticClass:"line-number"},[s._v("157")]),e("br"),e("span",{staticClass:"line-number"},[s._v("158")]),e("br"),e("span",{staticClass:"line-number"},[s._v("159")]),e("br"),e("span",{staticClass:"line-number"},[s._v("160")]),e("br"),e("span",{staticClass:"line-number"},[s._v("161")]),e("br"),e("span",{staticClass:"line-number"},[s._v("162")]),e("br"),e("span",{staticClass:"line-number"},[s._v("163")]),e("br"),e("span",{staticClass:"line-number"},[s._v("164")]),e("br"),e("span",{staticClass:"line-number"},[s._v("165")]),e("br"),e("span",{staticClass:"line-number"},[s._v("166")]),e("br"),e("span",{staticClass:"line-number"},[s._v("167")]),e("br"),e("span",{staticClass:"line-number"},[s._v("168")]),e("br"),e("span",{staticClass:"line-number"},[s._v("169")]),e("br"),e("span",{staticClass:"line-number"},[s._v("170")]),e("br"),e("span",{staticClass:"line-number"},[s._v("171")]),e("br"),e("span",{staticClass:"line-number"},[s._v("172")]),e("br"),e("span",{staticClass:"line-number"},[s._v("173")]),e("br"),e("span",{staticClass:"line-number"},[s._v("174")]),e("br"),e("span",{staticClass:"line-number"},[s._v("175")]),e("br"),e("span",{staticClass:"line-number"},[s._v("176")]),e("br"),e("span",{staticClass:"line-number"},[s._v("177")]),e("br"),e("span",{staticClass:"line-number"},[s._v("178")]),e("br"),e("span",{staticClass:"line-number"},[s._v("179")]),e("br"),e("span",{staticClass:"line-number"},[s._v("180")]),e("br"),e("span",{staticClass:"line-number"},[s._v("181")]),e("br"),e("span",{staticClass:"line-number"},[s._v("182")]),e("br"),e("span",{staticClass:"line-number"},[s._v("183")]),e("br"),e("span",{staticClass:"line-number"},[s._v("184")]),e("br"),e("span",{staticClass:"line-number"},[s._v("185")]),e("br"),e("span",{staticClass:"line-number"},[s._v("186")]),e("br"),e("span",{staticClass:"line-number"},[s._v("187")]),e("br"),e("span",{staticClass:"line-number"},[s._v("188")]),e("br"),e("span",{staticClass:"line-number"},[s._v("189")]),e("br"),e("span",{staticClass:"line-number"},[s._v("190")]),e("br"),e("span",{staticClass:"line-number"},[s._v("191")]),e("br"),e("span",{staticClass:"line-number"},[s._v("192")]),e("br"),e("span",{staticClass:"line-number"},[s._v("193")]),e("br"),e("span",{staticClass:"line-number"},[s._v("194")]),e("br"),e("span",{staticClass:"line-number"},[s._v("195")]),e("br"),e("span",{staticClass:"line-number"},[s._v("196")]),e("br"),e("span",{staticClass:"line-number"},[s._v("197")]),e("br"),e("span",{staticClass:"line-number"},[s._v("198")]),e("br"),e("span",{staticClass:"line-number"},[s._v("199")]),e("br"),e("span",{staticClass:"line-number"},[s._v("200")]),e("br"),e("span",{staticClass:"line-number"},[s._v("201")]),e("br"),e("span",{staticClass:"line-number"},[s._v("202")]),e("br"),e("span",{staticClass:"line-number"},[s._v("203")]),e("br"),e("span",{staticClass:"line-number"},[s._v("204")]),e("br"),e("span",{staticClass:"line-number"},[s._v("205")]),e("br"),e("span",{staticClass:"line-number"},[s._v("206")]),e("br"),e("span",{staticClass:"line-number"},[s._v("207")]),e("br"),e("span",{staticClass:"line-number"},[s._v("208")]),e("br"),e("span",{staticClass:"line-number"},[s._v("209")]),e("br"),e("span",{staticClass:"line-number"},[s._v("210")]),e("br"),e("span",{staticClass:"line-number"},[s._v("211")]),e("br"),e("span",{staticClass:"line-number"},[s._v("212")]),e("br"),e("span",{staticClass:"line-number"},[s._v("213")]),e("br"),e("span",{staticClass:"line-number"},[s._v("214")]),e("br"),e("span",{staticClass:"line-number"},[s._v("215")]),e("br"),e("span",{staticClass:"line-number"},[s._v("216")]),e("br"),e("span",{staticClass:"line-number"},[s._v("217")]),e("br"),e("span",{staticClass:"line-number"},[s._v("218")]),e("br"),e("span",{staticClass:"line-number"},[s._v("219")]),e("br"),e("span",{staticClass:"line-number"},[s._v("220")]),e("br"),e("span",{staticClass:"line-number"},[s._v("221")]),e("br"),e("span",{staticClass:"line-number"},[s._v("222")]),e("br"),e("span",{staticClass:"line-number"},[s._v("223")]),e("br"),e("span",{staticClass:"line-number"},[s._v("224")]),e("br"),e("span",{staticClass:"line-number"},[s._v("225")]),e("br"),e("span",{staticClass:"line-number"},[s._v("226")]),e("br"),e("span",{staticClass:"line-number"},[s._v("227")]),e("br"),e("span",{staticClass:"line-number"},[s._v("228")]),e("br"),e("span",{staticClass:"line-number"},[s._v("229")]),e("br"),e("span",{staticClass:"line-number"},[s._v("230")]),e("br"),e("span",{staticClass:"line-number"},[s._v("231")]),e("br"),e("span",{staticClass:"line-number"},[s._v("232")]),e("br"),e("span",{staticClass:"line-number"},[s._v("233")]),e("br"),e("span",{staticClass:"line-number"},[s._v("234")]),e("br"),e("span",{staticClass:"line-number"},[s._v("235")]),e("br"),e("span",{staticClass:"line-number"},[s._v("236")]),e("br"),e("span",{staticClass:"line-number"},[s._v("237")]),e("br"),e("span",{staticClass:"line-number"},[s._v("238")]),e("br"),e("span",{staticClass:"line-number"},[s._v("239")]),e("br"),e("span",{staticClass:"line-number"},[s._v("240")]),e("br"),e("span",{staticClass:"line-number"},[s._v("241")]),e("br"),e("span",{staticClass:"line-number"},[s._v("242")]),e("br"),e("span",{staticClass:"line-number"},[s._v("243")]),e("br"),e("span",{staticClass:"line-number"},[s._v("244")]),e("br"),e("span",{staticClass:"line-number"},[s._v("245")]),e("br"),e("span",{staticClass:"line-number"},[s._v("246")]),e("br"),e("span",{staticClass:"line-number"},[s._v("247")]),e("br"),e("span",{staticClass:"line-number"},[s._v("248")]),e("br"),e("span",{staticClass:"line-number"},[s._v("249")]),e("br"),e("span",{staticClass:"line-number"},[s._v("250")]),e("br"),e("span",{staticClass:"line-number"},[s._v("251")]),e("br"),e("span",{staticClass:"line-number"},[s._v("252")]),e("br"),e("span",{staticClass:"line-number"},[s._v("253")]),e("br"),e("span",{staticClass:"line-number"},[s._v("254")]),e("br"),e("span",{staticClass:"line-number"},[s._v("255")]),e("br"),e("span",{staticClass:"line-number"},[s._v("256")]),e("br"),e("span",{staticClass:"line-number"},[s._v("257")]),e("br"),e("span",{staticClass:"line-number"},[s._v("258")]),e("br"),e("span",{staticClass:"line-number"},[s._v("259")]),e("br"),e("span",{staticClass:"line-number"},[s._v("260")]),e("br"),e("span",{staticClass:"line-number"},[s._v("261")]),e("br"),e("span",{staticClass:"line-number"},[s._v("262")]),e("br"),e("span",{staticClass:"line-number"},[s._v("263")]),e("br"),e("span",{staticClass:"line-number"},[s._v("264")]),e("br"),e("span",{staticClass:"line-number"},[s._v("265")]),e("br"),e("span",{staticClass:"line-number"},[s._v("266")]),e("br"),e("span",{staticClass:"line-number"},[s._v("267")]),e("br"),e("span",{staticClass:"line-number"},[s._v("268")]),e("br"),e("span",{staticClass:"line-number"},[s._v("269")]),e("br"),e("span",{staticClass:"line-number"},[s._v("270")]),e("br"),e("span",{staticClass:"line-number"},[s._v("271")]),e("br"),e("span",{staticClass:"line-number"},[s._v("272")]),e("br"),e("span",{staticClass:"line-number"},[s._v("273")]),e("br"),e("span",{staticClass:"line-number"},[s._v("274")]),e("br"),e("span",{staticClass:"line-number"},[s._v("275")]),e("br"),e("span",{staticClass:"line-number"},[s._v("276")]),e("br"),e("span",{staticClass:"line-number"},[s._v("277")]),e("br"),e("span",{staticClass:"line-number"},[s._v("278")]),e("br"),e("span",{staticClass:"line-number"},[s._v("279")]),e("br"),e("span",{staticClass:"line-number"},[s._v("280")]),e("br"),e("span",{staticClass:"line-number"},[s._v("281")]),e("br"),e("span",{staticClass:"line-number"},[s._v("282")]),e("br"),e("span",{staticClass:"line-number"},[s._v("283")]),e("br"),e("span",{staticClass:"line-number"},[s._v("284")]),e("br"),e("span",{staticClass:"line-number"},[s._v("285")]),e("br"),e("span",{staticClass:"line-number"},[s._v("286")]),e("br"),e("span",{staticClass:"line-number"},[s._v("287")]),e("br"),e("span",{staticClass:"line-number"},[s._v("288")]),e("br"),e("span",{staticClass:"line-number"},[s._v("289")]),e("br"),e("span",{staticClass:"line-number"},[s._v("290")]),e("br"),e("span",{staticClass:"line-number"},[s._v("291")]),e("br"),e("span",{staticClass:"line-number"},[s._v("292")]),e("br"),e("span",{staticClass:"line-number"},[s._v("293")]),e("br"),e("span",{staticClass:"line-number"},[s._v("294")]),e("br"),e("span",{staticClass:"line-number"},[s._v("295")]),e("br"),e("span",{staticClass:"line-number"},[s._v("296")]),e("br"),e("span",{staticClass:"line-number"},[s._v("297")]),e("br"),e("span",{staticClass:"line-number"},[s._v("298")]),e("br"),e("span",{staticClass:"line-number"},[s._v("299")]),e("br"),e("span",{staticClass:"line-number"},[s._v("300")]),e("br"),e("span",{staticClass:"line-number"},[s._v("301")]),e("br"),e("span",{staticClass:"line-number"},[s._v("302")]),e("br"),e("span",{staticClass:"line-number"},[s._v("303")]),e("br"),e("span",{staticClass:"line-number"},[s._v("304")]),e("br"),e("span",{staticClass:"line-number"},[s._v("305")]),e("br"),e("span",{staticClass:"line-number"},[s._v("306")]),e("br"),e("span",{staticClass:"line-number"},[s._v("307")]),e("br"),e("span",{staticClass:"line-number"},[s._v("308")]),e("br"),e("span",{staticClass:"line-number"},[s._v("309")]),e("br"),e("span",{staticClass:"line-number"},[s._v("310")]),e("br"),e("span",{staticClass:"line-number"},[s._v("311")]),e("br"),e("span",{staticClass:"line-number"},[s._v("312")]),e("br"),e("span",{staticClass:"line-number"},[s._v("313")]),e("br"),e("span",{staticClass:"line-number"},[s._v("314")]),e("br"),e("span",{staticClass:"line-number"},[s._v("315")]),e("br"),e("span",{staticClass:"line-number"},[s._v("316")]),e("br"),e("span",{staticClass:"line-number"},[s._v("317")]),e("br"),e("span",{staticClass:"line-number"},[s._v("318")]),e("br"),e("span",{staticClass:"line-number"},[s._v("319")]),e("br"),e("span",{staticClass:"line-number"},[s._v("320")]),e("br"),e("span",{staticClass:"line-number"},[s._v("321")]),e("br"),e("span",{staticClass:"line-number"},[s._v("322")]),e("br"),e("span",{staticClass:"line-number"},[s._v("323")]),e("br"),e("span",{staticClass:"line-number"},[s._v("324")]),e("br"),e("span",{staticClass:"line-number"},[s._v("325")]),e("br"),e("span",{staticClass:"line-number"},[s._v("326")]),e("br"),e("span",{staticClass:"line-number"},[s._v("327")]),e("br"),e("span",{staticClass:"line-number"},[s._v("328")]),e("br"),e("span",{staticClass:"line-number"},[s._v("329")]),e("br"),e("span",{staticClass:"line-number"},[s._v("330")]),e("br"),e("span",{staticClass:"line-number"},[s._v("331")]),e("br"),e("span",{staticClass:"line-number"},[s._v("332")]),e("br"),e("span",{staticClass:"line-number"},[s._v("333")]),e("br"),e("span",{staticClass:"line-number"},[s._v("334")]),e("br"),e("span",{staticClass:"line-number"},[s._v("335")]),e("br"),e("span",{staticClass:"line-number"},[s._v("336")]),e("br"),e("span",{staticClass:"line-number"},[s._v("337")]),e("br"),e("span",{staticClass:"line-number"},[s._v("338")]),e("br"),e("span",{staticClass:"line-number"},[s._v("339")]),e("br"),e("span",{staticClass:"line-number"},[s._v("340")]),e("br"),e("span",{staticClass:"line-number"},[s._v("341")]),e("br"),e("span",{staticClass:"line-number"},[s._v("342")]),e("br"),e("span",{staticClass:"line-number"},[s._v("343")]),e("br"),e("span",{staticClass:"line-number"},[s._v("344")]),e("br"),e("span",{staticClass:"line-number"},[s._v("345")]),e("br"),e("span",{staticClass:"line-number"},[s._v("346")]),e("br"),e("span",{staticClass:"line-number"},[s._v("347")]),e("br"),e("span",{staticClass:"line-number"},[s._v("348")]),e("br"),e("span",{staticClass:"line-number"},[s._v("349")]),e("br"),e("span",{staticClass:"line-number"},[s._v("350")]),e("br"),e("span",{staticClass:"line-number"},[s._v("351")]),e("br"),e("span",{staticClass:"line-number"},[s._v("352")]),e("br"),e("span",{staticClass:"line-number"},[s._v("353")]),e("br"),e("span",{staticClass:"line-number"},[s._v("354")]),e("br"),e("span",{staticClass:"line-number"},[s._v("355")]),e("br"),e("span",{staticClass:"line-number"},[s._v("356")]),e("br"),e("span",{staticClass:"line-number"},[s._v("357")]),e("br"),e("span",{staticClass:"line-number"},[s._v("358")]),e("br"),e("span",{staticClass:"line-number"},[s._v("359")]),e("br"),e("span",{staticClass:"line-number"},[s._v("360")]),e("br"),e("span",{staticClass:"line-number"},[s._v("361")]),e("br"),e("span",{staticClass:"line-number"},[s._v("362")]),e("br"),e("span",{staticClass:"line-number"},[s._v("363")]),e("br"),e("span",{staticClass:"line-number"},[s._v("364")]),e("br"),e("span",{staticClass:"line-number"},[s._v("365")]),e("br"),e("span",{staticClass:"line-number"},[s._v("366")]),e("br"),e("span",{staticClass:"line-number"},[s._v("367")]),e("br"),e("span",{staticClass:"line-number"},[s._v("368")]),e("br"),e("span",{staticClass:"line-number"},[s._v("369")]),e("br"),e("span",{staticClass:"line-number"},[s._v("370")]),e("br"),e("span",{staticClass:"line-number"},[s._v("371")]),e("br"),e("span",{staticClass:"line-number"},[s._v("372")]),e("br"),e("span",{staticClass:"line-number"},[s._v("373")]),e("br"),e("span",{staticClass:"line-number"},[s._v("374")]),e("br"),e("span",{staticClass:"line-number"},[s._v("375")]),e("br"),e("span",{staticClass:"line-number"},[s._v("376")]),e("br"),e("span",{staticClass:"line-number"},[s._v("377")]),e("br"),e("span",{staticClass:"line-number"},[s._v("378")]),e("br"),e("span",{staticClass:"line-number"},[s._v("379")]),e("br"),e("span",{staticClass:"line-number"},[s._v("380")]),e("br"),e("span",{staticClass:"line-number"},[s._v("381")]),e("br"),e("span",{staticClass:"line-number"},[s._v("382")]),e("br"),e("span",{staticClass:"line-number"},[s._v("383")]),e("br"),e("span",{staticClass:"line-number"},[s._v("384")]),e("br"),e("span",{staticClass:"line-number"},[s._v("385")]),e("br"),e("span",{staticClass:"line-number"},[s._v("386")]),e("br"),e("span",{staticClass:"line-number"},[s._v("387")]),e("br"),e("span",{staticClass:"line-number"},[s._v("388")]),e("br"),e("span",{staticClass:"line-number"},[s._v("389")]),e("br"),e("span",{staticClass:"line-number"},[s._v("390")]),e("br"),e("span",{staticClass:"line-number"},[s._v("391")]),e("br"),e("span",{staticClass:"line-number"},[s._v("392")]),e("br"),e("span",{staticClass:"line-number"},[s._v("393")]),e("br"),e("span",{staticClass:"line-number"},[s._v("394")]),e("br"),e("span",{staticClass:"line-number"},[s._v("395")]),e("br"),e("span",{staticClass:"line-number"},[s._v("396")]),e("br"),e("span",{staticClass:"line-number"},[s._v("397")]),e("br"),e("span",{staticClass:"line-number"},[s._v("398")]),e("br"),e("span",{staticClass:"line-number"},[s._v("399")]),e("br"),e("span",{staticClass:"line-number"},[s._v("400")]),e("br"),e("span",{staticClass:"line-number"},[s._v("401")]),e("br"),e("span",{staticClass:"line-number"},[s._v("402")]),e("br"),e("span",{staticClass:"line-number"},[s._v("403")]),e("br"),e("span",{staticClass:"line-number"},[s._v("404")]),e("br"),e("span",{staticClass:"line-number"},[s._v("405")]),e("br"),e("span",{staticClass:"line-number"},[s._v("406")]),e("br"),e("span",{staticClass:"line-number"},[s._v("407")]),e("br"),e("span",{staticClass:"line-number"},[s._v("408")]),e("br"),e("span",{staticClass:"line-number"},[s._v("409")]),e("br"),e("span",{staticClass:"line-number"},[s._v("410")]),e("br"),e("span",{staticClass:"line-number"},[s._v("411")]),e("br"),e("span",{staticClass:"line-number"},[s._v("412")]),e("br"),e("span",{staticClass:"line-number"},[s._v("413")]),e("br"),e("span",{staticClass:"line-number"},[s._v("414")]),e("br"),e("span",{staticClass:"line-number"},[s._v("415")]),e("br"),e("span",{staticClass:"line-number"},[s._v("416")]),e("br"),e("span",{staticClass:"line-number"},[s._v("417")]),e("br"),e("span",{staticClass:"line-number"},[s._v("418")]),e("br"),e("span",{staticClass:"line-number"},[s._v("419")]),e("br"),e("span",{staticClass:"line-number"},[s._v("420")]),e("br"),e("span",{staticClass:"line-number"},[s._v("421")]),e("br"),e("span",{staticClass:"line-number"},[s._v("422")]),e("br"),e("span",{staticClass:"line-number"},[s._v("423")]),e("br"),e("span",{staticClass:"line-number"},[s._v("424")]),e("br"),e("span",{staticClass:"line-number"},[s._v("425")]),e("br"),e("span",{staticClass:"line-number"},[s._v("426")]),e("br"),e("span",{staticClass:"line-number"},[s._v("427")]),e("br"),e("span",{staticClass:"line-number"},[s._v("428")]),e("br"),e("span",{staticClass:"line-number"},[s._v("429")]),e("br"),e("span",{staticClass:"line-number"},[s._v("430")]),e("br"),e("span",{staticClass:"line-number"},[s._v("431")]),e("br"),e("span",{staticClass:"line-number"},[s._v("432")]),e("br"),e("span",{staticClass:"line-number"},[s._v("433")]),e("br"),e("span",{staticClass:"line-number"},[s._v("434")]),e("br"),e("span",{staticClass:"line-number"},[s._v("435")]),e("br"),e("span",{staticClass:"line-number"},[s._v("436")]),e("br"),e("span",{staticClass:"line-number"},[s._v("437")]),e("br"),e("span",{staticClass:"line-number"},[s._v("438")]),e("br"),e("span",{staticClass:"line-number"},[s._v("439")]),e("br"),e("span",{staticClass:"line-number"},[s._v("440")]),e("br"),e("span",{staticClass:"line-number"},[s._v("441")]),e("br"),e("span",{staticClass:"line-number"},[s._v("442")]),e("br"),e("span",{staticClass:"line-number"},[s._v("443")]),e("br"),e("span",{staticClass:"line-number"},[s._v("444")]),e("br"),e("span",{staticClass:"line-number"},[s._v("445")]),e("br"),e("span",{staticClass:"line-number"},[s._v("446")]),e("br"),e("span",{staticClass:"line-number"},[s._v("447")]),e("br"),e("span",{staticClass:"line-number"},[s._v("448")]),e("br"),e("span",{staticClass:"line-number"},[s._v("449")]),e("br"),e("span",{staticClass:"line-number"},[s._v("450")]),e("br"),e("span",{staticClass:"line-number"},[s._v("451")]),e("br"),e("span",{staticClass:"line-number"},[s._v("452")]),e("br"),e("span",{staticClass:"line-number"},[s._v("453")]),e("br"),e("span",{staticClass:"line-number"},[s._v("454")]),e("br"),e("span",{staticClass:"line-number"},[s._v("455")]),e("br"),e("span",{staticClass:"line-number"},[s._v("456")]),e("br"),e("span",{staticClass:"line-number"},[s._v("457")]),e("br"),e("span",{staticClass:"line-number"},[s._v("458")]),e("br"),e("span",{staticClass:"line-number"},[s._v("459")]),e("br"),e("span",{staticClass:"line-number"},[s._v("460")]),e("br"),e("span",{staticClass:"line-number"},[s._v("461")]),e("br"),e("span",{staticClass:"line-number"},[s._v("462")]),e("br"),e("span",{staticClass:"line-number"},[s._v("463")]),e("br"),e("span",{staticClass:"line-number"},[s._v("464")]),e("br"),e("span",{staticClass:"line-number"},[s._v("465")]),e("br"),e("span",{staticClass:"line-number"},[s._v("466")]),e("br"),e("span",{staticClass:"line-number"},[s._v("467")]),e("br"),e("span",{staticClass:"line-number"},[s._v("468")]),e("br"),e("span",{staticClass:"line-number"},[s._v("469")]),e("br"),e("span",{staticClass:"line-number"},[s._v("470")]),e("br"),e("span",{staticClass:"line-number"},[s._v("471")]),e("br"),e("span",{staticClass:"line-number"},[s._v("472")]),e("br"),e("span",{staticClass:"line-number"},[s._v("473")]),e("br"),e("span",{staticClass:"line-number"},[s._v("474")]),e("br"),e("span",{staticClass:"line-number"},[s._v("475")]),e("br"),e("span",{staticClass:"line-number"},[s._v("476")]),e("br"),e("span",{staticClass:"line-number"},[s._v("477")]),e("br"),e("span",{staticClass:"line-number"},[s._v("478")]),e("br"),e("span",{staticClass:"line-number"},[s._v("479")]),e("br"),e("span",{staticClass:"line-number"},[s._v("480")]),e("br"),e("span",{staticClass:"line-number"},[s._v("481")]),e("br"),e("span",{staticClass:"line-number"},[s._v("482")]),e("br"),e("span",{staticClass:"line-number"},[s._v("483")]),e("br"),e("span",{staticClass:"line-number"},[s._v("484")]),e("br"),e("span",{staticClass:"line-number"},[s._v("485")]),e("br"),e("span",{staticClass:"line-number"},[s._v("486")]),e("br"),e("span",{staticClass:"line-number"},[s._v("487")]),e("br"),e("span",{staticClass:"line-number"},[s._v("488")]),e("br"),e("span",{staticClass:"line-number"},[s._v("489")]),e("br"),e("span",{staticClass:"line-number"},[s._v("490")]),e("br"),e("span",{staticClass:"line-number"},[s._v("491")]),e("br"),e("span",{staticClass:"line-number"},[s._v("492")]),e("br"),e("span",{staticClass:"line-number"},[s._v("493")]),e("br")])]),e("h2",{attrs:{id:"更新2025-01-02"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新2025-01-02"}},[s._v("#")]),s._v(" 更新2025-01-02")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('spy:模拟对象的某些方法\n用spy指定getServerIp方法的返回值\n@InjectMocks\nEmpFlowExecuteWork empFlowExecuteWork = new EmpFlowExecuteWork();\nString serverIp = "192.168.1.1";\nEmpFlowExecuteWork spy = PowerMockito.spy(empFlowExecuteWork);\nPowerMockito.doReturn(serverIp).when(spy,"getServerIp");\nString serverIpResult = spy.getServerIp();\nAssert.assertEquals("参数不相等"，serverIp,serverIpResult);\n\nmockStatic:模拟静态方法\n@RunWith(PowerMockRunner.class)\n@PrepareForTest(EMPLog.class)\nPowderMockito.mockStatic(EMPLog.class);\nEMPLog.info("test");\nPowerMockito.verifyStatic(EMPLog.class);\nEMPLog.info("test");\n\nwhenNew模拟构造方法\n@RunWith(PowerMockRunner.class)\n@PrepareForTest(File.class)\nPowderMockito.whenNew(File.class).withArguments("test").thenReturn(file);\n\n调用私有方法\nAlipayDetails AlipayDetails = new AlipayDetails();\nMethod method = PowerMockito.method(AlipayDetails.class,"getAlipayDetails",String.class);\nmethod.invoke(AlipayDetails,"test");\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("h2",{attrs:{id:"更新2025-01-03"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新2025-01-03"}},[s._v("#")]),s._v(" 更新2025-01-03")]),s._v(" "),e("h3",{attrs:{id:"verify-验证是确认在模拟过程中-被测试方法是否按预期方式与其任何依赖方法进行了交互。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#verify-验证是确认在模拟过程中-被测试方法是否按预期方式与其任何依赖方法进行了交互。"}},[s._v("#")]),s._v(" verify：验证是确认在模拟过程中，被测试方法是否按预期方式与其任何依赖方法进行了交互。")]),s._v(" "),e("h3",{attrs:{id:"powermockito的mock和spy的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#powermockito的mock和spy的区别"}},[s._v("#")]),s._v(" PowerMockito的mock和spy的区别：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("mock：模拟对象，模拟对象调用的方法，返回模拟值。\nspy：包装一个已经存在的对象，先调用真实方法，当方法调用未定义才再调用模拟方法。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"单元测试断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单元测试断言"}},[s._v("#")]),s._v(" 单元测试断言")]),s._v(" "),e("h4",{attrs:{id:"单元测试必须断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单元测试必须断言"}},[s._v("#")]),s._v(" 单元测试必须断言")]),s._v(" "),e("h4",{attrs:{id:"单元测试断言的方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单元测试断言的方式"}},[s._v("#")]),s._v(" 单元测试断言的方式")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1. Junit自带断言，用于判断两个值是否相等\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("assertEquals(expected,actual)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("2. Junit自带断言，用于判断数组容器是否相等\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("assertArrayEquals(expected,actual)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("3. Junit自带断言，用于判断Boolean是否为true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("assertTrue(actual)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("4. Junit自带断言，用于判断Boolean是否为false\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("assertFalse(actual)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("5. Junit自带断言，用于判断是同一个对象\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("assertSame(expected,actual)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("6. Junit自带断言，用于判断不是同一个对象\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("assertNotSame(expected,actual)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("7. Junit自带断言，用于判断对象是否为null\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("assertNull(actual)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("8. Junit自带断言，用于判断对象是否不为null\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("assertNotNull(actual)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("9. Junit自带断言，用于判断参数值是否匹配规则\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("assertThat(actual,matcher)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("10. Junit自带断言，天狼星框架\n通过WriteLogUtil类中的printAssertionErrorAndException来统一输出错误断言信息和异常信息\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\n11. expect，expectMessage\n通过Junit中ExpectedException类对象，来断言期望的异常类对象和详细的异常信息\n@Rule\npublic ExpectedException exRule = ExpectedException.none();\n// 断言是否为BizExceptioin\nexRule.expect(BizException.class);\n// 断言返回具体的异常信息\nexRule.expectMessage("");\n\n12. verify\nMockito中检查是否发生了某些行为\nMockito.verify(mockObj, mock.times(1)).method(any());\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("// 被测方法，Controller层syncOrderStatus方法\npublic void syncOrderStatus(){\n// 验证syncOrderStatus的调用次数\norderStatusSyncService.syncOrderStatus();\n}\n// 被测方法\n@Test\npublic void unionOrderStatusSyncTest(){\nPowderMockito.doNothing().when(orderStatusSyncService).syncOrderStatus();\n// 获取mockObj\nOrderStatusSyncService orderStatusSyncService = PowderMockito.mock(OrderStatusSyncService.class);\norderStatusSyncController.syncOrderStatus();\n// orderStatusSyncService为mock对象，Mockito.times(1)为调用次数；syncOrderStatus为mock对象中调用的方法\nMockito.verify(orderStatusSyncService, Mockito.times(1)).syncOrderStatus();\n}")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n13. andExpected\nMockMvc单元测试\n- mockMvc.perform 执行一个请求\n- MockMvcRequestBuilders.get 创建一个请求\n- ResultActions.param添加请求传值\n- ResultActions.accept(MediaType.APPLICATION_JSON)设置返回类型\n- ResultActions.andExpect添加执行完成后的断言\n- ResultActions.andDo添加一个结果处理器，表示要对结果做点什么事情\n- ResultActions.andReturn执行结果\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v('MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders\n.get("/login")\n.accept(MediaType.APPLICATION_JSON)\n.param("name","")\n.andExpect(status().isOk())\n.andExpect(jsonPath("$.status").value(subMerchantAddResultVO.getStatus()))\n.andDo(logging.info(""))\n.andReturn());')]),s._v(" "),e("p",[s._v('例如：\n// 被测类\npublic class HelloController {\n@RequestMapping("/hello")\npublic String hello(){\nreturn "hello";\n}\n}')]),s._v(" "),e("p",[s._v("// 测试方法\nprivate MockMvc mvc = MockMvcBuilders.standaloneSetup(new HelloController()).build();")]),s._v(" "),e("p",[s._v('@Test\npublic void helloTest() throws Exception {\nmvc.perform(MockMvcRequestBuilders\n.get("/hello")\n.param("hello")\n.accept(MediaType.APPLICATION_JSON))\n.andExpect(content().string("hello"))\n}')]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n14. verifyStatic，PowerMockito中用来验证Mock对象中静态方法是否执行的行为。\n15. verifyPrivate，PowerMockito中用来验证Mock对象中私有方法是否执行的行为。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("PowderMockito.verifyPrivate(mockObj).invoke(method,argument)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("16. public接口无返回值如何断言\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ol",[e("li",[s._v("断言方法执行次数\nMockito.verify(mockObj, Mockito.times(1)).method(argument);")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" \n17. 捕获mock方法的调用参数，并进行断言，\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v('@Test\npublic void argumentTest(){\nList list = mock(List.class);\nList list1 = mock(List.class);\nList list2 = mock(List.class);\nlist.add("0");\nlist2.add("1");\nlist2.add("2");')]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v('// 调用0次，无需断言参数，可直接断言次数\nArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\nverify(list3,times(0)).add(argumentCaptor.capture());\n\n// 调用一次，断言参数\nArgumentCaptor<String> argumentCaptor1 = ArgumentCaptor.forClass(String.class);\nverify(list).add(argumentCaptor1.capture());\nassertEquals("0",argumentCaptor1.getValue());\n\n// 调用多次，断言参数\nArgumentCaptor<String> argumentCaptor2 = ArgumentCaptor.forClass(String.class);\nverify(list2,times(2)).add(argumentCaptor2.capture());\nList listActual = argumentCaptor2.getAllValues();\nassertEquals("1",listActual.get(0));\nassertEquals("2",listActual.get(1));\n')])])]),e("p",[s._v("}")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\n\npublic long getTimestamp(String dateString) throws ParseException {\n    if(StringUtils.isNotBlank(dateString)){\n        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n        return sdf.parse(dateString).getTime();\n    }\n    return 0;\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);