(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{407:function(t,a,s){"use strict";s.r(a);var r=s(7),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"sring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sring"}},[t._v("#")]),t._v(" Sring")]),t._v(" "),a("h2",{attrs:{id:"bean生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean生命周期"}},[t._v("#")]),t._v(" Bean生命周期")]),t._v(" "),a("h3",{attrs:{id:"简单版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单版"}},[t._v("#")]),t._v(" 简单版")]),t._v(" "),a("ul",[a("li",[t._v("实例化，调用类的无参构造方法，生成普通对象")]),t._v(" "),a("li",[t._v("依赖注入（反射给加了@Autowired和@Resource的属性赋值）")]),t._v(" "),a("li",[t._v("初始化前\n"),a("ul",[a("li",[t._v("检查Aware的相关接口并设置相关依赖")]),t._v(" "),a("li",[t._v("调用BeanPostProcessor的postProcessorBeforeInitialization()")]),t._v(" "),a("li",[t._v("是否实现InitializingBean接口，调用afterPropertiesSet()方法")]),t._v(" "),a("li",[t._v("是否配置自定义的init-method方法")])])]),t._v(" "),a("li",[t._v("初始化")]),t._v(" "),a("li",[t._v("初始化后\n"),a("ul",[a("li",[t._v("调用BeanPostProcessor的postProcessAfterInitialization()")]),t._v(" "),a("li",[t._v("AOP就是在这个阶段")])])]),t._v(" "),a("li",[t._v("使用中")]),t._v(" "),a("li",[t._v("销毁\n"),a("ul",[a("li",[t._v("是否实现DisposableBean接口，调用destroy()方法")]),t._v(" "),a("li",[t._v("是否配置自定义的destroy-method方法")])])])]),t._v(" "),a("h2",{attrs:{id:"循环依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖"}},[t._v("#")]),t._v(" 循环依赖")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/po_diagram.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"循环依赖的场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖的场景"}},[t._v("#")]),t._v(" 循环依赖的场景")]),t._v(" "),a("p",[t._v("A创建的过程需要B，于是A将自己放到三级缓存，去实例化B，B实例化的时候发现需要A，于是B先查一级缓存，没有，再查二级缓存，还是没有，再去三级缓存找A，找到了，把A挪到二级缓存，然后B实例化完成")]),t._v(" "),a("h3",{attrs:{id:"循环依赖的情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖的情况"}},[t._v("#")]),t._v(" 循环依赖的情况")]),t._v(" "),a("ul",[a("li",[t._v("属性循环依赖")]),t._v(" "),a("li",[t._v("构造器循环依赖----这种情况Spring无法解决循环依赖")])]),t._v(" "),a("h3",{attrs:{id:"三级缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三级缓存"}},[t._v("#")]),t._v(" 三级缓存")]),t._v(" "),a("ul",[a("li",[t._v("三级缓存\n"),a("ul",[a("li",[t._v("一级缓存：SingletonObjects，存放已经实例化好并初始化好的完整对象")]),t._v(" "),a("li",[t._v("二级缓存：EarlySingletonObjects，存放需要提前暴露的已经实例化但未初始化好的早期对象")]),t._v(" "),a("li",[t._v("三级缓存：SingletonFactories，存放对象工厂（lambda表达式，打破循环依赖的关键，解决AOP依赖原始对象的问题）")])])]),t._v(" "),a("li",[t._v("其实还有一个缓存，就是earlyProxyReferences，它用来记录某个原始对象是否进行过AOP增强，如果进行了增强，那么在循环依赖的时候，需要把earlyProxyReferences中的对象也拿出来放到二级缓存中")])]),t._v(" "),a("h3",{attrs:{id:"循环依赖的解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖的解决"}},[t._v("#")]),t._v(" 循环依赖的解决")]),t._v(" "),a("p",[t._v("当A、B两个类发生循环依赖时：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/202406011551757.png",alt:""}})]),t._v(" "),a("p",[t._v("A实例的初始化过程：")]),t._v(" "),a("ol",[a("li",[t._v("创建 A 实例，实例化的时候把 A 的对象工厂放入三级缓存，表示 A 开始实例化了，虽然这个对象还不完整，但是先曝光出来让大家知道。\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/202406011601107.png",alt:""}})]),t._v(" "),a("li",[t._v("A 注入属性时，发现依赖 B，此时 B 还没有实例化，所以去实例化 B")]),t._v(" "),a("li",[t._v("同样，B 注入属性时发现依赖 A，就从缓存中找 A 对象。依次从一级到三级缓存查询 A。\n发现可以从三级缓存中通过对象工厂拿到 A，虽然 A 还不太完善，但是存在，就把 A 放入到二级缓存，同时删除三级缓存中的 A，此时 B 已经实例化并且初始化完成了，把 B 放入到一级缓存。\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/202406011602107.png",alt:""}})]),t._v(" "),a("li",[t._v("接着 A 继续属性赋值，顺利从一级缓存拿到实例化且初始化好的 B 对象，A 对象初始化完成，删除二级缓存中 A ，同时把 A 放入到一级缓存。")]),t._v(" "),a("li",[t._v("最后，一级缓存中保存着实例化和初始化好的 A 、B对象。\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/202406011603255.png",alt:""}})])]),t._v(" "),a("h3",{attrs:{id:"只用两级缓存能解决循环依赖吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#只用两级缓存能解决循环依赖吗"}},[t._v("#")]),t._v(" 只用两级缓存能解决循环依赖吗？")]),t._v(" "),a("ul",[a("li",[t._v("通常情况可，但是如果涉及AOP，还是需要三级缓存")]),t._v(" "),a("li",[t._v("假设只有二级缓存，在二级缓存中放的一个普通Bean对象，Bean初始化过程中，通过BeanPostProcessor去生成代理对象之后，覆盖掉二级缓存中的普通Bean对象，就会导致Bean对象不一致了")])]),t._v(" "),a("h2",{attrs:{id:"aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[t._v("#")]),t._v(" AOP")]),t._v(" "),a("h3",{attrs:{id:"静态代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态代理"}},[t._v("#")]),t._v(" 静态代理")]),t._v(" "),a("ul",[a("li",[t._v("静态代理模式：自己手动编写代理类，代理类和被代理类实现相同的接口")]),t._v(" "),a("li",[t._v("优点：可以做到在代理类中增强被代理类的功能")]),t._v(" "),a("li",[t._v("缺点：需要为每一个被代理类都编写一个代理类，工作量比较大")])]),t._v(" "),a("h3",{attrs:{id:"动态代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态代理"}},[t._v("#")]),t._v(" 动态代理")]),t._v(" "),a("h4",{attrs:{id:"动态代理模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态代理模式"}},[t._v("#")]),t._v(" 动态代理模式")]),t._v(" "),a("p",[t._v("JDK动态代理和CGLIB动态代理")]),t._v(" "),a("h4",{attrs:{id:"jdk动态代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk动态代理"}},[t._v("#")]),t._v(" JDK动态代理")]),t._v(" "),a("p",[t._v("需要被代理类实现接口，否则无法使用JDK动态代理，反射生成一个代理接口的匿名类")]),t._v(" "),a("h4",{attrs:{id:"cglib动态代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cglib动态代理"}},[t._v("#")]),t._v(" CGLIB动态代理")]),t._v(" "),a("p",[t._v("asm字节码编辑技术，基于classload装载")]),t._v(" "),a("h2",{attrs:{id:"事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[t._v("#")]),t._v(" 事务")]),t._v(" "),a("h3",{attrs:{id:"事务类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务类型"}},[t._v("#")]),t._v(" 事务类型")]),t._v(" "),a("ul",[a("li",[t._v("编程式事务")]),t._v(" "),a("li",[t._v("声明式事务")])]),t._v(" "),a("h3",{attrs:{id:"事务原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务原理"}},[t._v("#")]),t._v(" 事务原理")]),t._v(" "),a("ul",[a("li",[t._v("前提是关闭自动提交")]),t._v(" "),a("li",[t._v("采用不同的连接器")]),t._v(" "),a("li",[t._v("用AOP新建立链接")]),t._v(" "),a("li",[t._v("ThreadLocal管理当前事务")])]),t._v(" "),a("h3",{attrs:{id:"事务隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务隔离级别"}},[t._v("#")]),t._v(" 事务隔离级别")]),t._v(" "),a("ul",[a("li",[t._v("读未提交Read Uncommitted")]),t._v(" "),a("li",[t._v("读已提交Read Committed")]),t._v(" "),a("li",[t._v("不可重复读Repeatable Read")]),t._v(" "),a("li",[t._v("串行化Serializable")])]),t._v(" "),a("h3",{attrs:{id:"事务传播行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务传播行为"}},[t._v("#")]),t._v(" 事务传播行为")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/20240601104909.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"spring常用注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring常用注解"}},[t._v("#")]),t._v(" Spring常用注解")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/202406012306183.png",alt:""}})])])}),[],!1,null,null,null);a.default=v.exports}}]);