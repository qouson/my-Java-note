(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{440:function(v,_,l){"use strict";l.r(_);var i=l(7),t=Object(i.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"ddd-domain-driver-design-领域驱动设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ddd-domain-driver-design-领域驱动设计"}},[v._v("#")]),v._v(" DDD（Domain Driver Design）领域驱动设计")]),v._v(" "),_("h2",{attrs:{id:"ddd是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ddd是什么"}},[v._v("#")]),v._v(" DDD是什么？")]),v._v(" "),_("p",[v._v("DDD是领域驱动设计，是一种软件开发方法，旨在通过使用领域模型来简化软件的开发、测试和维护。")]),v._v(" "),_("h2",{attrs:{id:"落地方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#落地方式"}},[v._v("#")]),v._v(" 落地方式")]),v._v(" "),_("h3",{attrs:{id:"战略和战术设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#战略和战术设计"}},[v._v("#")]),v._v(" 战略和战术设计")]),v._v(" "),_("h4",{attrs:{id:"四色建模法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四色建模法"}},[v._v("#")]),v._v(" 四色建模法")]),v._v(" "),_("ul",[_("li",[v._v("业务关键时刻")]),v._v(" "),_("li",[v._v("角色")]),v._v(" "),_("li",[v._v("人-事-物")]),v._v(" "),_("li",[v._v("概述")])]),v._v(" "),_("h4",{attrs:{id:"用例分析法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用例分析法"}},[v._v("#")]),v._v(" 用例分析法")]),v._v(" "),_("h4",{attrs:{id:"事件风暴法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事件风暴法"}},[v._v("#")]),v._v(" 事件风暴法")]),v._v(" "),_("h4",{attrs:{id:"领域故事讲述法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#领域故事讲述法"}},[v._v("#")]),v._v(" 领域故事讲述法")]),v._v(" "),_("h3",{attrs:{id:"战略设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#战略设计"}},[v._v("#")]),v._v(" 战略设计")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/202406021042258.png",alt:""}})]),v._v(" "),_("p",[v._v("三步骤\n1.在事件风暴中梳理业务中的用户操作，事件，以及外部依赖，根据这些要素梳理领域实体对象\n2.根据领域实体间的业务关联性，将业务紧密相关的实体组合成聚合，同时确定聚合中的聚合根，值对象和实体，聚合之间的边界就是第一层边界，逻辑边界。\n3.根据业务以及语义，将一个或多个聚合划定在一个限界上下文，形成领域模型。限界上下文之间的边界是第二层边界，可能就是微服务的边界，物理边界。")]),v._v(" "),_("ul",[_("li",[v._v("参与人员\n"),_("ul",[_("li",[v._v("业务专家（领域专家）")]),v._v(" "),_("li",[v._v("产品经理")]),v._v(" "),_("li",[v._v("技术专家（研发人员）")])])]),v._v(" "),_("li",[v._v("官方-白话解释\n"),_("ul",[_("li",[v._v("官方：在某个领域，核心围绕上下文的设计。主要关注上下文的划分，上下文映射的设计，通用语言的定义\n"),_("ul",[_("li",[v._v("上下文划分Bounded Context")]),v._v(" "),_("li",[v._v("上下文切换Context Map")]),v._v(" "),_("li",[v._v("上下文通用语言Ubiquitous Language")])])]),v._v(" "),_("li",[v._v("白话解释：在某个系统，核心围绕子系统的设计。主要关注系统的划分，系统内的核心术语定义\n"),_("ul",[_("li",[v._v("系统划分")]),v._v(" "),_("li",[v._v("交互方式")]),v._v(" "),_("li",[v._v("系统内的核心术语")])])])])]),v._v(" "),_("li",[v._v("领域+子域+核心域+通用域+支撑域\n"),_("ul",[_("li",[v._v("领域\n"),_("ul",[_("li",[v._v("领域是用来确定范围的，范围即边界，与微服务建设过程方法基本类似，核心思想就是将问题域逐步分解，降低业务系统实现的复杂度")])])]),v._v(" "),_("li",[v._v("子域\n"),_("ul",[_("li",[v._v("领域进一步划分的多个子领域，每个子域对应一个更小的问题域或更小的业务范围")])])]),v._v(" "),_("li",[v._v("核心域\n"),_("ul",[_("li",[v._v("决定产品和公司核心竞争力的子域")])])]),v._v(" "),_("li",[v._v("通用域\n"),_("ul",[_("li",[v._v("没有太多个性化的诉求，同时被多个子域使用的通用功能子域")])])]),v._v(" "),_("li",[v._v("支撑域\n"),_("ul",[_("li",[v._v("既不包含核心竞争力，也不包含通用功能的子域，例如数据代码类的数据字典")])])])])]),v._v(" "),_("li",[v._v("限界上下文+定义领域边界\n"),_("ul",[_("li",[v._v("1.通用语言")]),v._v(" "),_("li",[v._v("2.限界上下文\n"),_("ul",[_("li",[v._v("限界就是领域的边界，上下文则是语义环境，用来封装通用语言和领域对象，提供上下文环境，保证在领域之内的一些术语，业务相关对象有一个确切的含义，没有二义性。理论上限界上下文就是微服务边界。")])])])])])]),v._v(" "),_("h3",{attrs:{id:"战术设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#战术设计"}},[v._v("#")]),v._v(" 战术设计")]),v._v(" "),_("ul",[_("li",[v._v("参与人员\n"),_("ul",[_("li",[v._v("技术专家（研发人员）")])])]),v._v(" "),_("li",[v._v("官方-白话解释\n"),_("ul",[_("li",[_("p",[v._v("官方：核心关注上下文中的实体建模，定义值对象，实体等，更偏向开发细节。\nVO Entity Aggregate")]),v._v(" "),_("p",[v._v("实体\n聚合\n聚合根\n值对象\n聚合之间的关系")]),v._v(" "),_("p",[v._v("仓库\n工厂\n防腐层\n充血模型\n领域服务\n领域事件")])]),v._v(" "),_("li",[_("p",[v._v("核心关注某个子系统的代码实现，以面向对象的思维设计类的属性和方法，将领域模型中的领域对象与代码模型中的代码对象建立映射关系，将业务架构和系统架构绑定")])])])]),v._v(" "),_("li",[v._v("实现方式（为了高内聚，低耦合）\n"),_("ul",[_("li",[v._v("DDD分层架构\n"),_("ul",[_("li",[v._v("聚合之间的代码边界一定要清晰")]),v._v(" "),_("li",[v._v("一定要有代码分层的概念")])])]),v._v(" "),_("li",[v._v("整洁架构")]),v._v(" "),_("li",[v._v("CQRS")]),v._v(" "),_("li",[v._v("六边形架构")])])]),v._v(" "),_("li",[v._v("实体\n"),_("ul",[_("li",[v._v("具有唯一标识，通常和数据库表对应。多个属性，操作或行为的载体。实体和值对象会形成聚合，每个聚合一般在一个事务中操作，一般持久性。")])])]),v._v(" "),_("li",[v._v("值对象\n"),_("ul",[_("li",[v._v("不关心唯一值，具有校验逻辑，等值判断，只关心值的类，值对象本质就是一个集")])])]),v._v(" "),_("li",[v._v("聚合根\n"),_("ul",[_("li",[v._v("软件模型中那些以名词形式存在的领域对象。聚合根是主要业务的逻辑载体，DDD中所有的战术实现都围绕聚合根展开，70%场景下一个聚合内都只有一个实体，那就是聚合根。\n说白了，聚合的根实体，最具有代表性的实体。比如订单和订单项聚合之后的聚合根就是订单。")]),v._v(" "),_("li",[v._v("特征\n"),_("ul",[_("li",[v._v("1.它作为实体本身，拥有实体的属性和业务行为，实现自身的业务逻辑")]),v._v(" "),_("li",[v._v("2.它作为聚合的管理者，在聚合内部负责协调实体和值对象按照固定的业务规则协同完成共同的业务逻辑")]),v._v(" "),_("li",[v._v("3.聚合根之间的引用通过ID完成。聚合之间通过聚合根ID关联引用，如果要访问它聚合的实体，要先访问聚合根，再导航到聚合内部实体。")])])])])]),v._v(" "),_("li",[v._v("聚合，聚合根，实体，值对象对比\n"),_("ul",[_("li",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qouson/my-pic-bed/pic/202406021048763.png",alt:""}})])])])])])}),[],!1,null,null,null);_.default=t.exports}}]);